// Code generated by jsonschema. DO NOT EDIT.
package oneOf

import "encoding/json"

// ID: http://example.com/oneof.json

// JSON Schema for an fstab entry
type DiskDevice struct {
}

func (s *DiskDevice) storage() {}

// JSON Schema for an fstab entry
type DiskUUID struct {
}

func (s *DiskUUID) storage() {}

// JSON Schema for an fstab entry
type Nfs struct {
}

func (s *Nfs) storage() {}

// JSON Schema for an fstab entry
type Oneof struct {
	Storage Storage `json:"storage,omitempty", validate:"oneof"`
}

func (s *Oneof) UnmarshalJSON(b []byte) error {
	m := map[string]json.RawMessage{}
	if err := json.Unmarshal(b, &m); err != nil {
		return nil
	}

	storage := func() Storage {
		raw, ok := m["storage"]
		if !ok {
			return nil
		}

		var storage0 Storage0
		if err := json.Unmarshal(raw, &storage0); err == nil {
			return &storage0
		}

		var diskDevice DiskDevice
		if err := json.Unmarshal(raw, &diskDevice); err == nil {
			return &diskDevice
		}

		var diskUUID DiskUUID
		if err := json.Unmarshal(raw, &diskUUID); err == nil {
			return &diskUUID
		}

		var nfs Nfs
		if err := json.Unmarshal(raw, &nfs); err == nil {
			return &nfs
		}

		var tmpfs Tmpfs
		if err := json.Unmarshal(raw, &tmpfs); err == nil {
			return &tmpfs
		}

		return nil
	}
	type Alias Oneof
	aux := &struct {
		Storage Storage `json:"storage,omitempty", validate:"oneof"`
		*Alias
	}{
		Storage: storage(),
		Alias:   (*Alias)(s),
	}

	s.Storage = aux.Storage

	return nil
}

// Storage
type Storage interface {
	storage()
}
type Storage0 struct {
	Name  *string  `json:"name,omitempty"`
	Speed *float64 `json:"speed,omitempty"`
}

func (s *Storage0) storage() {}

// JSON Schema for an fstab entry
type Tmpfs struct {
}

func (s *Tmpfs) storage() {}
