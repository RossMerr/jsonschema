// Code generated by jsonschema. DO NOT EDIT.
package anyOf

import "encoding/json"

// ID: http://example.com/anyof.json

type Anyof struct {
	Storage []AnyofStorage `json:"storage,omitempty", validate:"anyof"`
}

func (s *Anyof) UnmarshalJSON(b []byte) error {
	m := map[string]json.RawMessage{}
	if err := json.Unmarshal(b, &m); err != nil {
		return nil
	}

	anyofStorage := func() []AnyofStorage {
		var anyofStorage []AnyofStorage
		raw, ok := m["storage"]
		if !ok {
			return anyofStorage
		}

		var array []json.RawMessage
		if err := json.Unmarshal(raw, &array); err != nil {
			return anyofStorage
		}

		for _, item := range array {
			var test *Test
			if err := json.Unmarshal(item, &test); err == nil {
				anyofStorage = append(anyofStorage, test)
			}

			var storage1 *Storage1
			if err := json.Unmarshal(item, &storage1); err == nil {
				anyofStorage = append(anyofStorage, storage1)
			}
		}

		return anyofStorage
	}
	type Alias Anyof
	aux := &struct {
		Storage []AnyofStorage `json:"storage,omitempty", validate:"anyof"`
		*Alias
	}{
		Storage: anyofStorage(),
		Alias:   (*Alias)(s),
	}

	s.Storage = aux.Storage

	return nil
}

// AnyofStorage
type AnyofStorage interface {
	anyofstorage()
}
type Storage1 float64

func (s *Storage1) anyofstorage() {}

type Test string

func (s *Test) anyofstorage() {}
