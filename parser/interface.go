package parser

import (
	"strings"

	"github.com/RossMerr/jsonschema"
)

type Interface struct {
	id jsonschema.ID
	Package    string
	comment string
	CommentImplementations string
	Name    string
	Method string
	StructTag  string
}

func NewInterface(ctx *SchemaContext, key jsonschema.ID, schema, parent *jsonschema.Schema) *Interface {
	name := schema.ID.Typename()
	if name == "" {
		name = key.String()
	}

	method := MixedCase(name)

	structTag := ""
	if parent != nil {
		structTag = ctx.Tags.ToFieldTag(strings.Title(name), schema, parent)
	}

	refs := []string{}
	if schema.OneOf != nil {
		for _, oneOf:= range schema.OneOf  {
			arr := ctx.ImplementInterface[oneOf.Ref]
			if arr == nil {
				arr = []string{}
			}
			arr = append(arr, method)
			ctx.ImplementInterface[oneOf.Ref] = arr
			refs = append(refs, oneOf.Ref.String())
		}
	}

	return &Interface{
		id: key,
		comment: schema.Description,
		CommentImplementations:strings.Join(refs, "\n // "),
		Name:    strings.Title(name),
		Method: method,
		Package:    ctx.Package,
		StructTag:structTag,
	}
}

func (s *Interface) Comment() string {
	return s.comment
}

func (s *Interface) ID() jsonschema.ID {
	return s.id
}

const InterfaceTemplate = `
// Code generated by jsonschema. DO NOT EDIT.

{{- if .Package}}
package {{.Package}}
{{else}}
package main
{{- end}}

{{if .Comment -}}
// {{ .Comment}}
{{ else -}}
// {{ .Name }}
{{end -}}
{{if .CommentImplementations -}}
// {{ .CommentImplementations}}
{{end -}}
type {{ .Name }} interface {
	{{ .Method}}()
}
`